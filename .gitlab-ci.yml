stages:
  - build
  - deploy
  - install

# 1) Build every commit on every branch and add the COMMIT SHORT SHA as suffix
maven-build:
  stage: build
  tags:
    ## requires shell-docker runner
    - shell-docker
  script:
    - export MAVEN_OPTS='-Xmx128m'
    - mvn clean install
  artifacts:
    paths:
      - target/*.jar
    name: ${CI_PROJECT_NAME}-${CI_COMMIT_SHORT_SHA}

# 2) Copies SNAPSHOT builds on 'master' and 'dm4' branch into download.dmx.systems/ci/ directory
copy-to-ci:
  stage: deploy
  script:
    - CIDIR='/var/www/download.dmx.systems/ci'
    - DESTDIR="${CIDIR}/${CI_PROJECT_NAME}"
    - JARFILE="$( basename $( ls target/*.jar | tail -n1) )"
    - NUNC="$( date +%F )"
    - DESTJARFILE="$( basename ${JARFILE} .jar )_${NUNC}_${CI_PIPELINE_ID}.jar"
    - if [ ! -d  ${DESTDIR} ]; then mkdir ${DESTDIR}; fi
    - cp target/${JARFILE} ${DESTDIR}/${DESTJARFILE}
    - ln -sf  ${DESTDIR}/${DESTJARFILE} ${DESTDIR}/${CI_PROJECT_NAME}-latest.jar
  dependencies:
    - maven-build
  only:
    - master
    - dm4

# 3) Copies tagged RELEASE builds into download.dmx.systems/plugins/ directory
copy-to-release:
  stage: deploy
  script:
    - RELEASEDIR='/var/www/download.dmx.systems/plugins'
    - DESTDIR="${RELEASEDIR}/${CI_PROJECT_NAME}"
    - JARFILE="$( basename $( ls target/*.jar | tail -n1) )"
    - if [ ! -d  ${DESTDIR} ]; then mkdir ${DESTDIR}; fi
    - cp target/${JARFILE} ${DESTDIR}/
  dependencies:
    - maven-build
  only:
    - tags


# 4) Install in docker-container
install-in-container:
  stage: install
  #except:
    #- tags
    #- master
  tags:
    ## requires shell-docker runner
    - shell-docker
  dependencies:
    - maven-build
  variables:
    COMPOSE_PROJECT_NAME: "${CI_PROJECT_NAME}_${CI_COMMIT_REF_SLUG}"
    TIER: "dev"
    DEEPL_AUTH_KEY: ${DEEPL_AUTH_KEY}
    DMX_ADMIN_PASSWORD: ${DMX_ADMIN_PASSWORD}
    LDAP_ADMIN_PASSWORD: ${LDAP_ADMIN_PASSWORD}
    WEBDIR: 'https://download.dmx.systems/ci'                              # <= stable|latest
    WEBCGI: 'https://download.dmx.systems/cgi-bin/v1/latest-version.cgi?'  # <= stable|latest
    PLUGINS: "dmx-deepl dmx-ldap dmx-sendmail dmx-thymeleaf dmx-file-upload dmx-sign-up"
  script:
    ## Deploy Test Container
    - deploy/ci-deploy-dmx-linqa-language-files.sh
    - deploy/ci-deploy-dmx-docker-instance.sh
    - sleep 5
    ## Create DMX Users via sign-up plugin
    - deploy/dmx-signup-create-ldap-user.sh "Testuser Peter Paula Tom Tabea Claude"
    ## Make users workspace members according to their team roles
    - deploy/dmx-add-users-to-ws-uri.sh "Testuser Tom Tabea" "linqa.team"

